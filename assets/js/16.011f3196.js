(window.webpackJsonp=window.webpackJsonp||[]).push([[16],{523:function(s,t,a){s.exports=a.p+"assets/img/eval_ast.7fe31d67.gif"},524:function(s,t,a){s.exports=a.p+"assets/img/OCRunnerExecute.4bc22ed2.png"},550:function(s,t,a){"use strict";a.r(t);var n=a(6),e=Object(n.a)({},(function(){var s=this,t=s.$createElement,n=s._self._c||t;return n("ContentSlotsDistributor",{attrs:{"slot-key":s.$parent.slotKey}},[n("p",[s._v("在正文开始前，我们先看看给出的语法树解释执行.gif，OCRunner的核心解释执行部分也是如此。")]),s._v(" "),n("p",[n("img",{attrs:{src:a(523),alt:""}})]),s._v(" "),n("p",[n("a",{attrs:{href:"https://www.iteye.com/blog/rednaxelafx-492667",target:"_blank",rel:"noopener noreferrer"}},[s._v("本图出自: 虚拟机随谈（一）：解释器，树遍历解释器，基于栈与基于寄存器，大杂烩"),n("OutboundLink")],1)]),s._v(" "),n("p",[s._v("如果你让我仅仅只靠文字就能给你解释清楚 OCRunner 是怎么运行起来的，你们可能是在为难我小蒋，肚子里墨水真的没那么多啊，太难了😂。所以在这一小节，我给大家准备了一个简单版 OCRunner，希望大家能从这个例子中，真正知道它是如何运行的。")]),s._v(" "),n("p",[s._v("希望你们看见项目中的 SingleEngine 类不要笑（哈哈哈），我只是想表达 单缸发动机 的意思 - _ -，我心爱的小摩托就是单缸拖拉机。")]),s._v(" "),n("p",[s._v("本节假设读者并不具备编译相关的知识。")]),s._v(" "),n("p",[s._v("本文对 lex 和 yacc 介绍有限，关于 flex 和 bison 的详细使用可以参照《flex与bison中文版》或者 《flex&bison》。")]),s._v(" "),n("p",[n("a",{attrs:{href:"https://github.com/SilverFruity/SimpleOCRunnerDemo",target:"_blank",rel:"noopener noreferrer"}},[s._v("Demo源码"),n("OutboundLink")],1),s._v("，建议使用 "),n("code",[s._v("git clone")]),s._v(" 的形式下载源码，每个小节的相应源码都对应在各自的 commit 里。通过边看文章边阅读源码的形式食用，更香哟。")]),s._v(" "),n("p",[s._v("我们将通过以下这个例子，来说明 OCRunner 执行的主要实现，将省略补丁文件的序列化和加载过程。")]),s._v(" "),n("p",[s._v("现在，我们的目标是让这段文本像 C 一样执行，并且最终变量 "),n("strong",[s._v("c")]),s._v(" 的值为 5 。")]),s._v(" "),n("div",{staticClass:"language-c line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-c"}},[n("code",[n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("int")]),s._v(" d "),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token number"}},[s._v("2")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n"),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("int")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token function"}},[s._v("add")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("int")]),s._v(" arg0"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("double")]),s._v(" arg1"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n  "),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("return")]),s._v(" arg0 "),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("+")]),s._v(" arg1 "),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("+")]),s._v(" d"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n"),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("int")]),s._v(" a "),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v(" \n"),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("double")]),s._v(" b "),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token number"}},[s._v("2.0")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n"),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("int")]),s._v(" c "),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token function"}},[s._v("add")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("a"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" b"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br"),n("span",{staticClass:"line-number"},[s._v("7")]),n("br")])]),n("h4",{attrs:{id:"词法分析器"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#词法分析器"}},[s._v("#")]),s._v(" 词法分析器")]),s._v(" "),n("p",[s._v("通俗来说，词法分析就是将符合相应规则的字符串转换为一个 "),n("strong",[s._v("Token")]),s._v("（可以将它看为一个由"),n("strong",[s._v("类型")]),s._v("和"),n("strong",[s._v("值")]),s._v("两个属性组成的类）。")]),s._v(" "),n("p",[s._v("比如当匹配到 'int' 时，'int' 将会被转换为 INT_TYPE ，也是就是 Token 的类型，它的值可以是我们后续的值类型（一个枚举）。")]),s._v(" "),n("p",[s._v("再比如当匹配到 '1.0' 字符串时，'1.0' 被转换为 DOUBLE_LITERAL 类型并且 Token 此时的值为浮点数 1.0。")]),s._v(" "),n("p",[s._v("针对这里例子，我们现在有如下几个规则:")]),s._v(" "),n("ol",[n("li",[n("p",[s._v("关键词: int、double、return")])]),s._v(" "),n("li",[n("p",[s._v("标识符（可以是变量名、类型等）:  以字母、_ 、$ 开头的字符串")])]),s._v(" "),n("li",[n("p",[s._v("数值:  整数、浮点数")])]),s._v(" "),n("li",[n("p",[s._v("符号: ( ) ; { } , = +")])])]),s._v(" "),n("p",[s._v("上述都是我们接下来需要识别的，我们将直接使用 flex 完成词法分析器。")]),s._v(" "),n("p",[s._v("词法分析器 "),n("strong",[s._v("lexer.l")]),s._v(" 中的代码:")]),s._v(" "),n("div",{staticClass:"language-C line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-c"}},[n("code",[n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("%")]),s._v("option noyywrap\n"),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("%")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n    "),n("span",{pre:!0,attrs:{class:"token macro property"}},[n("span",{pre:!0,attrs:{class:"token directive-hash"}},[s._v("#")]),n("span",{pre:!0,attrs:{class:"token directive keyword"}},[s._v("import")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token expression"}},[n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("<")]),s._v("Foundation"),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("/")]),s._v("Foundation"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("h"),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">")])])]),s._v("\n    "),n("span",{pre:!0,attrs:{class:"token macro property"}},[n("span",{pre:!0,attrs:{class:"token directive-hash"}},[s._v("#")]),n("span",{pre:!0,attrs:{class:"token directive keyword"}},[s._v("include")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token string"}},[s._v('"y.tab.h"')])]),s._v("\n"),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("%")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n"),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("%")]),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("%")]),s._v("\n"),n("span",{pre:!0,attrs:{class:"token string"}},[s._v('","')]),s._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("return")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token string"}},[s._v("','")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n"),n("span",{pre:!0,attrs:{class:"token string"}},[s._v('";"')]),s._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("return")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token string"}},[s._v("';'")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n"),n("span",{pre:!0,attrs:{class:"token string"}},[s._v('"("')]),s._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("return")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token string"}},[s._v("'('")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n"),n("span",{pre:!0,attrs:{class:"token string"}},[s._v('")"')]),s._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("return")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token string"}},[s._v("')'")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n"),n("span",{pre:!0,attrs:{class:"token string"}},[s._v('"{"')]),s._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("return")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token string"}},[s._v("'{'")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n"),n("span",{pre:!0,attrs:{class:"token string"}},[s._v('"}"')]),s._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("return")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token string"}},[s._v("'}'")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n"),n("span",{pre:!0,attrs:{class:"token string"}},[s._v('"="')]),s._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("return")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token string"}},[s._v("'='")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n"),n("span",{pre:!0,attrs:{class:"token string"}},[s._v('"+"')]),s._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("return")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token string"}},[s._v("'+'")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n"),n("span",{pre:!0,attrs:{class:"token string"}},[s._v('"-"')]),s._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("return")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token string"}},[s._v("'-'")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n"),n("span",{pre:!0,attrs:{class:"token string"}},[s._v('"int"')]),s._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("return")]),s._v(" INT_TYPE"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n"),n("span",{pre:!0,attrs:{class:"token string"}},[s._v('"double"')]),s._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("return")]),s._v(" DOUBLE_TYPE"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n"),n("span",{pre:!0,attrs:{class:"token string"}},[s._v('"return"')]),s._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("return")]),s._v("  RETURN"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 浮点数")]),s._v("\n"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),n("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("-")]),n("span",{pre:!0,attrs:{class:"token number"}},[s._v("9")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("+")]),s._v("\\"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),n("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("-")]),n("span",{pre:!0,attrs:{class:"token number"}},[s._v("9")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("+")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v(" yylval"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("doubleValue "),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token function"}},[s._v("atof")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("yytext"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("return")]),s._v(" DOUBLE_LITERAL"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 整数")]),s._v("\n"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),n("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("-")]),n("span",{pre:!0,attrs:{class:"token number"}},[s._v("9")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),n("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("-")]),n("span",{pre:!0,attrs:{class:"token number"}},[s._v("9")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("*")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("  yylval"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("intValue "),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("int")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),n("span",{pre:!0,attrs:{class:"token function"}},[s._v("strtol")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("yytext"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token constant"}},[s._v("NULL")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token number"}},[s._v("10")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("return")]),s._v(" INTETER_LITERAL"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 标识符")]),s._v("\n"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),s._v("A"),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("-")]),s._v("Za"),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("-")]),s._v("z_$"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),s._v("A"),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("-")]),s._v("Za"),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("-")]),s._v("z_$"),n("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("-")]),n("span",{pre:!0,attrs:{class:"token number"}},[s._v("9")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("*")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v(" yylval"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("stringValue "),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" yytext"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("return")]),s._v(" IDENTIFIER"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n"),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("%")]),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("%")]),s._v("\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br"),n("span",{staticClass:"line-number"},[s._v("7")]),n("br"),n("span",{staticClass:"line-number"},[s._v("8")]),n("br"),n("span",{staticClass:"line-number"},[s._v("9")]),n("br"),n("span",{staticClass:"line-number"},[s._v("10")]),n("br"),n("span",{staticClass:"line-number"},[s._v("11")]),n("br"),n("span",{staticClass:"line-number"},[s._v("12")]),n("br"),n("span",{staticClass:"line-number"},[s._v("13")]),n("br"),n("span",{staticClass:"line-number"},[s._v("14")]),n("br"),n("span",{staticClass:"line-number"},[s._v("15")]),n("br"),n("span",{staticClass:"line-number"},[s._v("16")]),n("br"),n("span",{staticClass:"line-number"},[s._v("17")]),n("br"),n("span",{staticClass:"line-number"},[s._v("18")]),n("br"),n("span",{staticClass:"line-number"},[s._v("19")]),n("br"),n("span",{staticClass:"line-number"},[s._v("20")]),n("br"),n("span",{staticClass:"line-number"},[s._v("21")]),n("br"),n("span",{staticClass:"line-number"},[s._v("22")]),n("br"),n("span",{staticClass:"line-number"},[s._v("23")]),n("br"),n("span",{staticClass:"line-number"},[s._v("24")]),n("br"),n("span",{staticClass:"line-number"},[s._v("25")]),n("br")])]),n("h5",{attrs:{id:"flex语法简单简介"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#flex语法简单简介"}},[s._v("#")]),s._v(" Flex语法简单简介")]),s._v(" "),n("ul",[n("li",[s._v("上半部分的"),n("code",[s._v("%{ %}")]),s._v(" 主要用于书写 C 代码，引入头文件，自定义函数等等，最终会以文本的形式被添加到 "),n("strong",[s._v("lexer.yy.c")]),s._v(" 中（ Demo 中你可以在编译缓存中找到该文件）。")]),s._v(" "),n("li",[s._v("下半部分的 "),n("code",[s._v("%% %%")]),s._v("就是关键了，通过使用正则表达式，将符合规则的字符流转换为相应的 token 。")]),s._v(" "),n("li",[n("strong",[s._v("yylval")]),s._v("这则是 Token 的值，默认情况下它一个 int 类型，但是在 bison 中可以使用 "),n("strong",[s._v("%union")]),s._v(" 声明来重新定义它的类型。")])]),s._v(" "),n("p",[s._v("当我们调用词法分析器后，上述文本将会做出如下转换，如何对它进行语法匹配，这就是接下来的内容了。")]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("\tint          d      =       2       ;\n> INT_TYPE IDENTIFIER = INTETER_LITERAL ;\n  int      add        (    int       arg0     ,   double      arg1     ) {\n> INT_TYPE IDENTIFIER ( INT_TYPE IDENTIFIER , DOUBLE_TYPE IDENTIFIER ) {\n  return     arg0   +    arg1    +     d      ;\n> RETURN IDENTIFIER + IDENTIFIER + IDENTIFIER ;\n  }\n> }\n\tint          a      =       1       ;\n> INT_TYPE IDENTIFIER = INTETER_LITERAL ;\n  double          b      =         2.0     ;\n> DOUBLE_TYPE IDENTIFIER = INTETER_LITERAL ;\n  int           c     =    add     (     a      ,      b     ) ;\n> INT_TYPE IDENTIFIER = IDENTIFIER ( IDENTIFIER , IDENTIFIER ) ;\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br"),n("span",{staticClass:"line-number"},[s._v("7")]),n("br"),n("span",{staticClass:"line-number"},[s._v("8")]),n("br"),n("span",{staticClass:"line-number"},[s._v("9")]),n("br"),n("span",{staticClass:"line-number"},[s._v("10")]),n("br"),n("span",{staticClass:"line-number"},[s._v("11")]),n("br"),n("span",{staticClass:"line-number"},[s._v("12")]),n("br"),n("span",{staticClass:"line-number"},[s._v("13")]),n("br"),n("span",{staticClass:"line-number"},[s._v("14")]),n("br")])]),n("h4",{attrs:{id:"语法分析器"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#语法分析器"}},[s._v("#")]),s._v(" 语法分析器")]),s._v(" "),n("p",[s._v("语法分析器 "),n("strong",[s._v("parser.y")]),s._v(" 中的代码，目前还没有任何语法相关的逻辑。")]),s._v(" "),n("div",{staticClass:"language-c line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-c"}},[n("code",[n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("%")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n"),n("span",{pre:!0,attrs:{class:"token macro property"}},[n("span",{pre:!0,attrs:{class:"token directive-hash"}},[s._v("#")]),n("span",{pre:!0,attrs:{class:"token directive keyword"}},[s._v("import")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token expression"}},[n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("<")]),s._v("Foundation"),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("/")]),s._v("Foundation"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("h"),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">")])])]),s._v("\n"),n("span",{pre:!0,attrs:{class:"token macro property"}},[n("span",{pre:!0,attrs:{class:"token directive-hash"}},[s._v("#")]),n("span",{pre:!0,attrs:{class:"token directive keyword"}},[s._v("define")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token macro-name"}},[s._v("YYDEBUG")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token expression"}},[n("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")])])]),s._v("\n"),n("span",{pre:!0,attrs:{class:"token macro property"}},[n("span",{pre:!0,attrs:{class:"token directive-hash"}},[s._v("#")]),n("span",{pre:!0,attrs:{class:"token directive keyword"}},[s._v("define")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token macro-name"}},[s._v("YYERROR_VERBOSE")])]),s._v("\n"),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("extern")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("int")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token function"}},[s._v("yylex")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("void")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n"),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("extern")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("void")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token function"}},[s._v("yyerror")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("const")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("char")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("*")]),s._v("s"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n"),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("%")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n"),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("%")]),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("union")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n    "),n("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("uint64_t")]),s._v(" intValue"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n    "),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("double")]),s._v(" doubleValue"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v(" \n    "),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("char")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("*")]),s._v("stringValue"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n    __unsafe_unretained id object"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n"),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("%")]),s._v("token"),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("<")]),s._v("stringValue"),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">")]),s._v(" IDENTIFIER\n"),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("%")]),s._v("token"),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("<")]),s._v("doubleValue"),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">")]),s._v(" DOUBLE_LITERAL\n"),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("%")]),s._v("token"),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("<")]),s._v("intValue"),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">")]),s._v(" \t\tINTETER_LITERAL\n"),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("%")]),s._v("token INT_TYPE\n"),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("%")]),s._v("token DOUBLE_TYPE\n"),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("%")]),s._v("token RETURN\n"),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("%")]),s._v("start door\n"),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("%")]),s._v("type"),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("<")]),s._v("object"),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">")]),s._v(" statements\n\n"),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("%")]),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("%")]),s._v("\ndoor"),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),s._v(" \n"),n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("/*empty*/")]),s._v("\n"),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("|")]),s._v(" statements"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\nstatements"),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),s._v("\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("/*empty*/")]),s._v("\n"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n"),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("%")]),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("%")]),s._v("\n\n"),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("void")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token function"}},[s._v("yyerror")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("const")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("char")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("*")]),s._v("s"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br"),n("span",{staticClass:"line-number"},[s._v("7")]),n("br"),n("span",{staticClass:"line-number"},[s._v("8")]),n("br"),n("span",{staticClass:"line-number"},[s._v("9")]),n("br"),n("span",{staticClass:"line-number"},[s._v("10")]),n("br"),n("span",{staticClass:"line-number"},[s._v("11")]),n("br"),n("span",{staticClass:"line-number"},[s._v("12")]),n("br"),n("span",{staticClass:"line-number"},[s._v("13")]),n("br"),n("span",{staticClass:"line-number"},[s._v("14")]),n("br"),n("span",{staticClass:"line-number"},[s._v("15")]),n("br"),n("span",{staticClass:"line-number"},[s._v("16")]),n("br"),n("span",{staticClass:"line-number"},[s._v("17")]),n("br"),n("span",{staticClass:"line-number"},[s._v("18")]),n("br"),n("span",{staticClass:"line-number"},[s._v("19")]),n("br"),n("span",{staticClass:"line-number"},[s._v("20")]),n("br"),n("span",{staticClass:"line-number"},[s._v("21")]),n("br"),n("span",{staticClass:"line-number"},[s._v("22")]),n("br"),n("span",{staticClass:"line-number"},[s._v("23")]),n("br"),n("span",{staticClass:"line-number"},[s._v("24")]),n("br"),n("span",{staticClass:"line-number"},[s._v("25")]),n("br"),n("span",{staticClass:"line-number"},[s._v("26")]),n("br"),n("span",{staticClass:"line-number"},[s._v("27")]),n("br"),n("span",{staticClass:"line-number"},[s._v("28")]),n("br"),n("span",{staticClass:"line-number"},[s._v("29")]),n("br"),n("span",{staticClass:"line-number"},[s._v("30")]),n("br"),n("span",{staticClass:"line-number"},[s._v("31")]),n("br"),n("span",{staticClass:"line-number"},[s._v("32")]),n("br"),n("span",{staticClass:"line-number"},[s._v("33")]),n("br"),n("span",{staticClass:"line-number"},[s._v("34")]),n("br")])]),n("h5",{attrs:{id:"yacc语法简单介绍"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#yacc语法简单介绍"}},[s._v("#")]),s._v(" Yacc语法简单介绍")]),s._v(" "),n("ul",[n("li",[n("p",[n("code",[s._v("%{ %}")]),s._v("中和 Flex 是一样的。但是关于这里的 yylex 和 yyerror 两个函数，他们两兄弟是必须引入的")])]),s._v(" "),n("li",[n("p",[n("strong",[s._v("%union")]),s._v(" 如之前所说，将重新定义 "),n("strong",[s._v("yylval")]),s._v(" 的类型，可以在词法分析阶段，保留不同类型的值")])]),s._v(" "),n("li",[n("p",[n("strong",[s._v("%token<stringValue> IDENTIFIER")]),s._v(" 将在 yacc 声明一个名为 IDENTIFIER 的 token，并且表明了它的值类型（获取它的值时，将从 union 的哪个字段取值）。")])]),s._v(" "),n("li",[n("p",[n("strong",[s._v("%type<object> statements")]),s._v(" 与 "),n("strong",[s._v("%token")]),s._v(" 不同是的，这是声明一条规约（语法规则）。")])]),s._v(" "),n("li",[n("p",[n("strong",[s._v("%start")]),s._v(" 将从指定的规约，作为语法解析器的入口")])]),s._v(" "),n("li",[n("p",[s._v("关于 "),n("code",[s._v("%{ %}")]),s._v(" 和 "),n("code",[s._v("%% %%")]),s._v("，与 flex 不同是的，"),n("code",[s._v("%% %%")]),s._v(" 中采用 BNF 文法的变种来描述语法规则，当你明白了它的运作方式，其实可读性还是很高的。")]),s._v(" "),n("p",[s._v("现在我们需要使用 "),n("strong",[s._v("lexer.l")]),s._v(" 以及 "),n("strong",[s._v("parser.y")]),s._v(" ，完成对 "),n("code",[s._v("a = 1 + 2; b = 2.0 - 1.0;")]),s._v(" 的识别，并且打印计算结果。")]),s._v(" "),n("p",[s._v("使用 Yacc 实现对两个表达式的识别以及计算的源码，已经在仓库 "),n("a",{attrs:{href:"https://github.com/SilverFruity/SimpleOCRunnerDemo",target:"_blank",rel:"noopener noreferrer"}},[s._v("SimpleOCRunnerDemo"),n("OutboundLink")],1),s._v(" 的 "),n("a",{attrs:{href:"https://github.com/SilverFruity/SimpleOCRunnerDemo/commit/c09d35868207ec44e7a4854552e9b19246f561d1",target:"_blank",rel:"noopener noreferrer"}},[s._v("不同类型简单计算的例子"),n("OutboundLink")],1),s._v("  中完成，对 Yacc 语法不熟悉的小伙伴，可以看完这一小部分，再去看源码。为限制本文篇幅，我将尽量减少在文中的代码。")]),s._v(" "),n("p",[s._v("首先我们先将 "),n("code",[s._v("a = 1 + 2; b = 2.0 - 1.0;")]),s._v(" 转换为 Token :")]),s._v(" "),n("div",{staticClass:"language-C line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-c"}},[n("code",[n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("//表达式 1")]),s._v("\nIDENTIFIER "),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" INTETER_LITERAL "),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("+")]),s._v(" INTETER_LITERAL "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("//表达式 2")]),s._v("\nIDENTIFIER "),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" DOUBLE_LITERAL "),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("-")]),s._v(" DOUBLE_LITERAL "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br")])]),n("p",[s._v("通俗来说，如果我们逐个逐个的读入每个 Token，我们要匹配上述两个表达式，可以有以下代码逻辑：")]),s._v(" "),n("div",{staticClass:"language-c line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-c"}},[n("code",[n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("extern")]),s._v(" Token "),n("span",{pre:!0,attrs:{class:"token function"}},[s._v("nextToken")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("void")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n"),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("while")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("token "),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token function"}},[s._v("nextToken")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),s._v("\n\t"),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("if")]),s._v(" token "),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("==")]),s._v(" IDENTIFIER"),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),s._v("\n\t\t"),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("if")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token function"}},[s._v("nextToken")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("==")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token string"}},[s._v("'='")]),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),s._v("\n\t\t\t token "),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token function"}},[s._v("nextToken")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n\t\t   "),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("if")]),s._v(" token "),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("==")]),s._v(" INTETER_LITERAL"),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),s._v("\n\t\t   \t "),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("if")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token function"}},[s._v("nextToken")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("==")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token string"}},[s._v("'+'")]),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),s._v("\n\t\t   \t \t "),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("if")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token function"}},[s._v("nextToken")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("==")]),s._v(" INTETER_LITERAL"),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),s._v("\n\t\t   \t \t   "),n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("//完成 IDENTIFIER = INTETER_LITERAL + INTETER_LITERAL ;")]),s._v("\n\t\t   \t \t \t "),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("return")]),s._v("\n\t\t   "),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("if")]),s._v(" token "),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("==")]),s._v(" DOUBLE_LITERAL"),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),s._v("\n\t\t   \t "),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("if")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token function"}},[s._v("nextToken")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("==")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token string"}},[s._v("'-'")]),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),s._v("\n\t\t   \t \t "),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("if")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token function"}},[s._v("nextToken")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("==")]),s._v(" DOUBLE_LITERAL"),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),s._v("\n\t\t   \t \t   "),n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("//完成 IDENTIFIER = DOUBLE_LITERAL - DOUBLE_LITERAL ;")]),s._v("\n\t\t   \t \t \t "),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("return")]),s._v("\n\t"),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("break")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n\t\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 这个逻辑使用 Yacc 代码可以表示为")]),s._v("\nassign_expression"),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),s._v("\nIDENTIFIER "),n("span",{pre:!0,attrs:{class:"token string"}},[s._v("'='")]),s._v(" expression\n"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\nexpression"),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),s._v("\nINTETER_LITERAL "),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("+")]),s._v(" INTETER_LITERAL\n"),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("|")]),s._v(" DOUBLE_LITERAL "),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("-")]),s._v(" DOUBLE_LITERAL\n"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("//  NAME: 其实是实现了一条规约（语法规则），始终对下一个Token进行匹配，其实中的 | 表示一个 or 的逻辑分支，还有就是规约可以递归使用。更多的Yacc语法可以参阅《flex与bison中文版》53页。")]),s._v("\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br"),n("span",{staticClass:"line-number"},[s._v("7")]),n("br"),n("span",{staticClass:"line-number"},[s._v("8")]),n("br"),n("span",{staticClass:"line-number"},[s._v("9")]),n("br"),n("span",{staticClass:"line-number"},[s._v("10")]),n("br"),n("span",{staticClass:"line-number"},[s._v("11")]),n("br"),n("span",{staticClass:"line-number"},[s._v("12")]),n("br"),n("span",{staticClass:"line-number"},[s._v("13")]),n("br"),n("span",{staticClass:"line-number"},[s._v("14")]),n("br"),n("span",{staticClass:"line-number"},[s._v("15")]),n("br"),n("span",{staticClass:"line-number"},[s._v("16")]),n("br"),n("span",{staticClass:"line-number"},[s._v("17")]),n("br"),n("span",{staticClass:"line-number"},[s._v("18")]),n("br"),n("span",{staticClass:"line-number"},[s._v("19")]),n("br"),n("span",{staticClass:"line-number"},[s._v("20")]),n("br"),n("span",{staticClass:"line-number"},[s._v("21")]),n("br"),n("span",{staticClass:"line-number"},[s._v("22")]),n("br"),n("span",{staticClass:"line-number"},[s._v("23")]),n("br"),n("span",{staticClass:"line-number"},[s._v("24")]),n("br"),n("span",{staticClass:"line-number"},[s._v("25")]),n("br"),n("span",{staticClass:"line-number"},[s._v("26")]),n("br")])])])]),s._v(" "),n("p",[s._v("现在让我们回到初始目标，现在我们要实现它相应的语法分析器:")]),s._v(" "),n("div",{staticClass:"language-c line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-c"}},[n("code",[n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("int")]),s._v(" d "),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token number"}},[s._v("2")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n"),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("int")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token function"}},[s._v("add")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("int")]),s._v(" arg0"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("double")]),s._v(" arg1"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n  "),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("return")]),s._v(" arg0 "),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("+")]),s._v(" arg1 "),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("+")]),s._v(" d"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n"),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("int")]),s._v(" a "),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v(" \n"),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("double")]),s._v(" b "),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token number"}},[s._v("2.0")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n"),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("int")]),s._v(" c "),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token function"}},[s._v("add")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("a"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" b"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br"),n("span",{staticClass:"line-number"},[s._v("7")]),n("br")])]),n("p",[s._v("还记得我们在词法分析器中的实现吗，文本到 Token 的转换规则:")]),s._v(" "),n("div",{staticClass:"language-c line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-c"}},[n("code",[n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("int")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("->")]),s._v(" INT_TYPE\n"),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("double")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("->")]),s._v(" DOUBLE_TYPE\n"),n("span",{pre:!0,attrs:{class:"token string"}},[s._v("'a-zA-z'")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("->")]),s._v(" IDENTIFIER\n"),n("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("->")]),s._v(" INTEGER_LITERAL\n"),n("span",{pre:!0,attrs:{class:"token number"}},[s._v("2.0")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("->")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token function"}},[s._v("DOUBLE_LITERAL")]),s._v("\n"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("+")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("->")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("+")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("//字符")]),s._v("\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br")])]),n("p",[s._v("首先，我们完全可以确定的是，出现最多的 Token 组合为：")]),s._v(" "),n("div",{staticClass:"language-c line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-c"}},[n("code",[n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// int/double xxx")]),s._v("\nTYPE IDENTIFIER\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br")])]),n("p",[s._v("同时我们的数据类型有两种，分别为 int / double ，因此我们的第一条规约为:")]),s._v(" "),n("div",{staticClass:"language-c line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-c"}},[n("code",[s._v("specifier_type"),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),s._v("\nINT_TYPE\n"),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("|")]),s._v("DOUBLE_TYPE\n"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br")])]),n("p",[s._v("接下来，我们来梳理一下所有的声明语法（变量、函数）:")]),s._v(" "),n("div",{staticClass:"language-c line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-c"}},[n("code",[n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("int")]),s._v(" a\n"),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("double")]),s._v(" b "),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token number"}},[s._v("2.0")]),s._v("\n"),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("int")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token function"}},[s._v("add")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("int")]),s._v(" arg0"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("int")]),s._v(" arg1"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br")])]),n("p",[s._v("针对以上三个声明语法，可以使用以下两个规约匹配：")]),s._v(" "),n("div",{staticClass:"language-c line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-c"}},[n("code",[n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 对int/double xxx统一处理，其他的单独处理即可")]),s._v("\ndeclaration"),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),s._v("\nspecifier_type IDENTIFIER\n"),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("|")]),s._v(" declaration "),n("span",{pre:!0,attrs:{class:"token string"}},[s._v("'='")]),s._v(" expression\n"),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("|")]),s._v(" declaration "),n("span",{pre:!0,attrs:{class:"token string"}},[s._v("'('")]),s._v(" declaration_list "),n("span",{pre:!0,attrs:{class:"token string"}},[s._v("')'")]),s._v("\n"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// declaration_list 就是一个以','为分隔符的列表处理")]),s._v("\ndeclaration_list"),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),s._v("\ndeclaration\n"),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("|")]),s._v(" declaration_list "),n("span",{pre:!0,attrs:{class:"token string"}},[s._v("','")]),s._v(" declaration\n"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br"),n("span",{staticClass:"line-number"},[s._v("7")]),n("br"),n("span",{staticClass:"line-number"},[s._v("8")]),n("br"),n("span",{staticClass:"line-number"},[s._v("9")]),n("br"),n("span",{staticClass:"line-number"},[s._v("10")]),n("br"),n("span",{staticClass:"line-number"},[s._v("11")]),n("br"),n("span",{staticClass:"line-number"},[s._v("12")]),n("br")])]),n("p",[s._v("接下来我们需要处理表达式，我们这里对表达式简单的定义为： '='  和 'return' 右部分，不包含 ';' 。")]),s._v(" "),n("div",{staticClass:"language-c line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-c"}},[n("code",[n("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),s._v("\n"),n("span",{pre:!0,attrs:{class:"token number"}},[s._v("1.0")]),s._v("\na\na "),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("+")]),s._v(" b\n"),n("span",{pre:!0,attrs:{class:"token function"}},[s._v("add")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("a"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" b"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br")])]),n("p",[s._v("针对以上表达式，可以使用的最简规约")]),s._v(" "),n("div",{staticClass:"language-c line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-c"}},[n("code",[n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 处理 1、1.0、a")]),s._v("\nprimary_expression"),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),s._v("\nIDENTIFIER\n"),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("|")]),s._v(" INTETER_LITERAL\n"),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("|")]),s._v(" DOUBLE_LITERAL\n"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 处理 a + b、add(a, b)")]),s._v("\nexpression"),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),s._v("\nprimary_expression\n"),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("|")]),s._v(" expression "),n("span",{pre:!0,attrs:{class:"token string"}},[s._v("'+'")]),s._v(" expression\n"),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("|")]),s._v(" expression "),n("span",{pre:!0,attrs:{class:"token string"}},[s._v("'('")]),s._v(" expression_list "),n("span",{pre:!0,attrs:{class:"token string"}},[s._v("')'")]),s._v("\n"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// expression_list与declaration_list雷同")]),s._v("\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br"),n("span",{staticClass:"line-number"},[s._v("7")]),n("br"),n("span",{staticClass:"line-number"},[s._v("8")]),n("br"),n("span",{staticClass:"line-number"},[s._v("9")]),n("br"),n("span",{staticClass:"line-number"},[s._v("10")]),n("br"),n("span",{staticClass:"line-number"},[s._v("11")]),n("br"),n("span",{staticClass:"line-number"},[s._v("12")]),n("br"),n("span",{staticClass:"line-number"},[s._v("13")]),n("br"),n("span",{staticClass:"line-number"},[s._v("14")]),n("br")])]),n("p",[s._v("实现了expression规约后，实现 "),n("strong",[s._v("return")]),s._v(" 就很简单了 "),n("code",[s._v("RETURN expression")]),s._v("。")]),s._v(" "),n("p",[s._v("我们将 "),n("code",[s._v("{ ... }")]),s._v(" 这个整体统称为一个块或者是作用域，它由表达式的列表或者子作用域组成。")]),s._v(" "),n("p",[s._v("在完成对块的匹配之前，我们首先要能够匹配多个不同的声明。")]),s._v(" "),n("p",[s._v("根据已经实现的规约，在其尾部加一个"),n("code",[s._v(";")]),s._v("，完成一个声明的匹配。")]),s._v(" "),n("p",[s._v("因此实现了 "),n("code",[s._v("statement")]),s._v(" 规约，用以将各个声明的规约整合。")]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("statement:\ndeclaration ';'\n| expression ';'\n| RETURN expression ';'\n;\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br")])]),n("p",[s._v("其次，我们还需要匹配作用域中的多个声明或者零个声明，那么 "),n("code",[s._v("statement_list")]),s._v(" 应运而生。")]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("statement_list: \n| statement\n| statement_list statement\n;\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br")])]),n("p",[s._v("这个时候，我们已经能够处理作用域中的声明列表了，那么针对作用域的规约如下:")]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("scope_statements:\n'{' statement_list '}'\n;\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br")])]),n("p",[s._v("目前就只有对函数的声明没有实现了，但我们早已在 "),n("code",[s._v("declaration")]),s._v(" 中实现了对了 "),n("code",[s._v("int add(int a, double b)")]),s._v(" 识别。\n最终的 "),n("code",[s._v("statement")]),s._v(" 规约如下:")]),s._v(" "),n("div",{staticClass:"language-c line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-c"}},[n("code",[s._v("statement"),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),s._v("\ndeclaration "),n("span",{pre:!0,attrs:{class:"token string"}},[s._v("';'")]),s._v("\n"),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("|")]),s._v(" expression "),n("span",{pre:!0,attrs:{class:"token string"}},[s._v("';'")]),s._v("\n"),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("|")]),s._v(" RETURN expression "),n("span",{pre:!0,attrs:{class:"token string"}},[s._v("';'")]),s._v("\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("//函数声明的识别")]),s._v("\n"),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("|")]),s._v(" declaration scope_statements\n"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br"),n("span",{staticClass:"line-number"},[s._v("7")]),n("br")])]),n("p",[s._v("本小节相关代码，在"),n("a",{attrs:{href:"https://github.com/SilverFruity/SimpleOCRunnerDemo",target:"_blank",rel:"noopener noreferrer"}},[s._v("SimpleOCRunnerDemo"),n("OutboundLink")],1),s._v(" 的 "),n("a",{attrs:{href:"https://github.com/SilverFruity/SimpleOCRunnerDemo/commit/850de3fe2db9ce3a059e809560bb2fb88ea3ac06",target:"_blank",rel:"noopener noreferrer"}},[s._v("section 语法分析"),n("OutboundLink")],1),s._v("  提交中。")]),s._v(" "),n("h4",{attrs:{id:"生成语法树"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#生成语法树"}},[s._v("#")]),s._v(" 生成语法树")]),s._v(" "),n("p",[s._v("在我们这个例子中，语法树中需要的节点如下（如果小伙伴想添加更多的语法，可自行更改）：")]),s._v(" "),n("p",[s._v("所有节点都继承自"),n("strong",[s._v("ASTNode")]),s._v("类。")]),s._v(" "),n("ol",[n("li",[n("strong",[s._v("ASTSpecifierNode")]),s._v("变量类型节点："),n("code",[s._v("int")]),s._v(" , "),n("code",[s._v("double")])]),s._v(" "),n("li",[n("strong",[s._v("ASTDeclareNode")]),s._v("变量声明节点："),n("code",[s._v("int a")])]),s._v(" "),n("li",[n("strong",[s._v("ASTValueNode")]),s._v("值节点: "),n("code",[s._v("2")]),s._v(", "),n("code",[s._v("1.0")]),s._v(", "),n("code",[s._v("a")])]),s._v(" "),n("li",[n("strong",[s._v("ASTInitDeclareNode")]),s._v("变量初始化声明节点: "),n("code",[s._v("double b = 2.0")])]),s._v(" "),n("li",[n("strong",[s._v("ASTBinaryNode")]),s._v("二元运算节点: "),n("code",[s._v("a + b")])]),s._v(" "),n("li",[n("strong",[s._v("ASTScopeNode")]),s._v("作用域节点: "),n("code",[s._v("{}")])]),s._v(" "),n("li",[n("strong",[s._v("ASTFunctionDeclareNode")]),s._v("函数声明节点: "),n("code",[s._v("int add(int arg0, double arg1)")])]),s._v(" "),n("li",[n("strong",[s._v("ASTFunctionImpNode")]),s._v("函数节点:  "),n("code",[s._v("int add(int arg0, double arg1) { }")])]),s._v(" "),n("li",[s._v("**ASTReturnNode **return节点："),n("code",[s._v("return xxx")])]),s._v(" "),n("li",[n("strong",[s._v("ASTFunctionCallNode")]),s._v("函数调用节点: "),n("code",[s._v("add(a, b)")])])]),s._v(" "),n("p",[n("strong",[s._v("ASTSpecifierNode")]),s._v(" "),n("code",[s._v("int/double")]),s._v("：我们这里其实就是一个简单枚举，但我们还添加了类型名称的属性")]),s._v(" "),n("div",{staticClass:"language-objc line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-objc"}},[n("code",[n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("typedef")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("enum")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n    ASTSpecifierTypeInt"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v("\n    ASTSpecifierTypeDouble\n"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("ASTSpecifierType"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n\n"),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("@interface")]),s._v(" ASTSpecifierNode"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),s._v(" ASTNode\n"),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("@property")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("nonatomic"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" assign"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" ASTSpecifierType type"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n"),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("@property")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("nonatomic"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" strong"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" NSString "),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("*")]),s._v("typeName"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n"),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("@end")]),s._v("\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br"),n("span",{staticClass:"line-number"},[s._v("7")]),n("br"),n("span",{staticClass:"line-number"},[s._v("8")]),n("br"),n("span",{staticClass:"line-number"},[s._v("9")]),n("br")])]),n("p",[n("strong",[s._v("ASTDeclareNode")]),s._v(" "),n("code",[s._v("int a")]),s._v(":  可以看出由一个变量类型( "),n("strong",[s._v("ASTSpecifierNode")]),s._v(" )和变量名组成")]),s._v(" "),n("div",{staticClass:"language-objc line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-objc"}},[n("code",[n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("@interface")]),s._v(" ASTDeclareNode"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),s._v(" ASTNode\n"),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("@property")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("nonatomic"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" strong"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" ASTSpecifierNode "),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("*")]),s._v("type"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n"),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("@property")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("nonatomic"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" strong"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" NSString "),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("*")]),s._v("varname"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n"),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("@end")]),s._v("\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br")])]),n("p",[n("strong",[s._v("ASTValueNode")]),s._v(" "),n("code",[s._v("2")]),s._v(", "),n("code",[s._v("1.0")]),s._v(", "),n("code",[s._v("a")]),s._v(":  有三种值，整型、浮点数、变量名")]),s._v(" "),n("p",[s._v("在我们的代码中存在两种变量，标识符："),n("code",[s._v("a")]),s._v("，标量："),n("code",[s._v("1.0 ...")]),s._v("，同时一个变量只能拥有一个值和一个值类型，所以我们使用"),n("code",[s._v("enum ASTValueNodeType")]),s._v(" + "),n("code",[s._v("union ASTValueNodeValue")]),s._v("的形式来完成类型和值的对应。")]),s._v(" "),n("div",{staticClass:"language-objc line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-objc"}},[n("code",[n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("typedef")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("enum")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n    ASTValueNodeIdentifier"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v("\n    ASTValueNodeInt"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v("\n    ASTValueNodeDouble\n"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("ASTValueNodeType"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n\n"),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("typedef")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("union")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n    "),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("void")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("*")]),s._v("pointerValue"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n    int64_t intValue"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n    "),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("double")]),s._v(" doubleValue"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("ASTValueNodeValue"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n\n"),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("@interface")]),s._v(" ASTValueNode"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),s._v(" ASTNode\n"),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("@property")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("nonatomic"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" assign"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" ASTValueNodeType type"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n"),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("@property")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("nonatomic"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" assign"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" ASTValueNodeValue value"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n"),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("@end")]),s._v("\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br"),n("span",{staticClass:"line-number"},[s._v("7")]),n("br"),n("span",{staticClass:"line-number"},[s._v("8")]),n("br"),n("span",{staticClass:"line-number"},[s._v("9")]),n("br"),n("span",{staticClass:"line-number"},[s._v("10")]),n("br"),n("span",{staticClass:"line-number"},[s._v("11")]),n("br"),n("span",{staticClass:"line-number"},[s._v("12")]),n("br"),n("span",{staticClass:"line-number"},[s._v("13")]),n("br"),n("span",{staticClass:"line-number"},[s._v("14")]),n("br"),n("span",{staticClass:"line-number"},[s._v("15")]),n("br"),n("span",{staticClass:"line-number"},[s._v("16")]),n("br")])]),n("p",[n("strong",[s._v("ASTInitDeclareNode")]),s._v(" "),n("code",[s._v("double b = 2.0")]),s._v(": 此时我们再处理初始化声明表达式的数据结构就很简单了，由变量声明节点和值节点组成，结构如下")]),s._v(" "),n("div",{staticClass:"language-objc line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-objc"}},[n("code",[n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("@interface")]),s._v(" ASTInitDeclareNode"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),s._v(" ASTNode\n"),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("@property")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("nonatomic"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" strong"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" ASTDeclareNode "),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("*")]),s._v("declare"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n"),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("@property")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("nonatomic"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" strong"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" ASTNode "),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("*")]),s._v("expression"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n"),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("@end")]),s._v("\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br")])]),n("p",[n("strong",[s._v("ASTBinaryNode")]),s._v(" "),n("code",[s._v("a + b")]),s._v(": 主要有左右两个表达式以及中间的操作符组成")]),s._v(" "),n("p",[s._v("事实上，左右的表达式可能并不单单只是一个变量名（或者表达式），因此，我们这里使用的是"),n("strong",[s._v("ASTNode")])]),s._v(" "),n("div",{staticClass:"language-objc line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-objc"}},[n("code",[n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("typedef")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("enum")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n    ASTBinaryNodeOperatorAdd\n"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("ASTBinaryNodeOperator"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n\n"),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("@interface")]),s._v(" ASTBinaryNode"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),s._v(" ASTNode\n"),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("@property")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("nonatomic"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" assign"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" ASTBinaryNodeOperator operator"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n"),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("@property")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("nonatomic"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" strong"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" ASTNode "),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("*")]),s._v("left"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n"),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("@property")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("nonatomic"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" strong"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" ASTNode "),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("*")]),s._v("right"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n"),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("@end")]),s._v("\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br"),n("span",{staticClass:"line-number"},[s._v("7")]),n("br"),n("span",{staticClass:"line-number"},[s._v("8")]),n("br"),n("span",{staticClass:"line-number"},[s._v("9")]),n("br")])]),n("p",[n("strong",[s._v("ASTScopeNode")]),s._v(" "),n("code",[s._v("{}")]),s._v(" 中主要存在的是多个语法节点，因此，其属性只有一个存储节点的数组")]),s._v(" "),n("p",[n("strong",[s._v("ASTFunctionDeclareNode")]),s._v(" "),n("code",[s._v("int add(int a, double b)")]),s._v("，主要由一个 "),n("strong",[s._v("ASTDeclareNode")]),s._v("（"),n("code",[s._v("int add")]),s._v("）和它的数组（"),n("code",[s._v("int a, double b")]),s._v("）组成")]),s._v(" "),n("p",[n("strong",[s._v("ASTFunctionImpNode")]),s._v(" "),n("code",[s._v("int add(int a, double b) { }")]),s._v("，则是由上述两个节点组成")]),s._v(" "),n("p",[n("strong",[s._v("ASTFunctionCallNode")]),s._v(" "),n("code",[s._v("add(a, b)")]),s._v(" ，由一个调用者节点和参数节点数组组成")]),s._v(" "),n("p",[s._v("因此他们的结构如下:")]),s._v(" "),n("div",{staticClass:"language-objc line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-objc"}},[n("code",[n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("@interface")]),s._v(" ASTScopeNode "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),s._v(" ASTNode\n"),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("@property")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("nonatomic"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" strong"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" NSMutableArray "),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("*")]),s._v("nodes"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n"),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("@end")]),s._v("\n\n"),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("@interface")]),s._v(" ASTFunctionDeclareNode"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),s._v(" ASTNode\n"),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("@property")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("nonatomic"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" strong"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" ASTDeclareNode "),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("*")]),s._v("declare"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n"),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("@property")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("nonatomic"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" strong"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" NSMutableArray "),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("*")]),s._v("argDeclares"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n"),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("@end")]),s._v("\n\n"),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("@interface")]),s._v(" ASTFunctionImpNode"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),s._v(" ASTNode\n"),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("@property")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("nonatomic"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" strong"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" ASTFunctionDeclareNode "),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("*")]),s._v("declare"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n"),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("@property")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("nonatomic"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" strong"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" ASTScopeNode "),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("*")]),s._v("scope"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n"),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("@end")]),s._v("\n\n"),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("@interface")]),s._v(" ASTFunctionCallNode"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),s._v(" ASTNode\n"),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("@property")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("nonatomic"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" strong"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" ASTNode "),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("*")]),s._v("caller"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n"),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("@property")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("nonatomic"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" strong"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" NSMutableArray "),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("*")]),s._v("args"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n"),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("@end")]),s._v("\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br"),n("span",{staticClass:"line-number"},[s._v("7")]),n("br"),n("span",{staticClass:"line-number"},[s._v("8")]),n("br"),n("span",{staticClass:"line-number"},[s._v("9")]),n("br"),n("span",{staticClass:"line-number"},[s._v("10")]),n("br"),n("span",{staticClass:"line-number"},[s._v("11")]),n("br"),n("span",{staticClass:"line-number"},[s._v("12")]),n("br"),n("span",{staticClass:"line-number"},[s._v("13")]),n("br"),n("span",{staticClass:"line-number"},[s._v("14")]),n("br"),n("span",{staticClass:"line-number"},[s._v("15")]),n("br"),n("span",{staticClass:"line-number"},[s._v("16")]),n("br"),n("span",{staticClass:"line-number"},[s._v("17")]),n("br"),n("span",{staticClass:"line-number"},[s._v("18")]),n("br")])]),n("p",[s._v("最终 "),n("strong",[s._v("parser.y")]),s._v(" 中的部分代码如下，"),n("strong",[s._v("globalAst")]),s._v(" 为一个全局的语法树变量:")]),s._v(" "),n("div",{staticClass:"language-objc line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-objc"}},[n("code",[s._v("door"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),s._v("\nstatement_list\n"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n    globalAst"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("nodes "),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" $"),n("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\nstatement_list"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),s._v("\n"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n    __autoreleasing id value "),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),s._v("NSMutableArray array"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n    $$ "),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" value"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n"),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("|")]),s._v(" statement_list statement\n"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n    "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),s._v("$"),n("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),s._v(" addObject"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),s._v(" $"),n("span",{pre:!0,attrs:{class:"token number"}},[s._v("2")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n    $$ "),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" $"),n("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br"),n("span",{staticClass:"line-number"},[s._v("7")]),n("br"),n("span",{staticClass:"line-number"},[s._v("8")]),n("br"),n("span",{staticClass:"line-number"},[s._v("9")]),n("br"),n("span",{staticClass:"line-number"},[s._v("10")]),n("br"),n("span",{staticClass:"line-number"},[s._v("11")]),n("br"),n("span",{staticClass:"line-number"},[s._v("12")]),n("br"),n("span",{staticClass:"line-number"},[s._v("13")]),n("br"),n("span",{staticClass:"line-number"},[s._v("14")]),n("br"),n("span",{staticClass:"line-number"},[s._v("15")]),n("br"),n("span",{staticClass:"line-number"},[s._v("16")]),n("br"),n("span",{staticClass:"line-number"},[s._v("17")]),n("br"),n("span",{staticClass:"line-number"},[s._v("18")]),n("br")])]),n("p",[s._v("关于在 "),n("strong",[s._v(".l")]),s._v(" 和 "),n("strong",[s._v(".y")]),s._v("中书写代码不方便的问题，可以在 vscode 中安装 flex 和 bsion 的相关插件，有了代码提示，体验会好很多很多。")]),s._v(" "),n("h5",{attrs:{id:"单元测试"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#单元测试"}},[s._v("#")]),s._v(" 单元测试")]),s._v(" "),n("blockquote",[n("p",[s._v("为什么会在这儿提到单元测试呢？")]),s._v(" "),n("p",[s._v("oc2mango 以及 OCRunner 能够开发出来，单元测试有超大功劳。")]),s._v(" "),n("p",[s._v("针对 oc2mango 方面，随着项目的发展，越来越多的语法需要支持，当你在修改语法分析器的时候，稍有一个不慎，就极有可能导致已经支持的语法变成不支持，没有单元测试的话，后续的开发几乎就寸步难行了。现在反思一下，每留下一个爆红的测试示例，有时也像一个一个挑战，等着你去征服他们，绿了以后感觉贼爽。")])]),s._v(" "),n("p",[s._v("之前我们一直没有提到单元测试，但在目前这个阶段，我们已经可以愉快的使用单元测试了（其实我们在最开始的时候就应该使用的😂，篇幅有限啊）。")]),s._v(" "),n("p",[s._v("目前我们的单元测试目标很明确：检验生成的语法树是否正确。")]),s._v(" "),n("p",[s._v("那我们的输入->输出的概念应该为：源码->语法树->单元测试->是否正确。")]),s._v(" "),n("p",[s._v("之前的代码，我们是无法通过 [SingleEngine run:] 得到语法树的，因此我们在SingleEngine中添加了一个 "),n("strong",[s._v("+ (AST *)parse: (NSString *)source")]),s._v("的类方法，用于完成：源码->语法树。")]),s._v(" "),n("p",[s._v("为了方便单元测试，也在 SingleEngine 中特意添加了一个 parserError 用于最基础的语法测试判断。")]),s._v(" "),n("p",[s._v("当你打算尝试加入一个新的语法时，你可以写一个最简单的关于 parserError 的单元测试，亮一个红灯。")]),s._v(" "),n("p",[s._v("示例：SimpleOCRunnerDemoTests.m 中的 testExample 代码:")]),s._v(" "),n("div",{staticClass:"language-objc line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-objc"}},[n("code",[n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("-")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("void")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("testExample "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n    NSString "),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("*")]),s._v("source "),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v("\n    "),n("span",{pre:!0,attrs:{class:"token string"}},[s._v('@"int a = 1;"')]),s._v("\n    "),n("span",{pre:!0,attrs:{class:"token string"}},[s._v('"double b = 1.0;"')]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n    AST "),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("*")]),s._v("ast "),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),s._v("SingleEngine parse"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),s._v("source"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n    "),n("span",{pre:!0,attrs:{class:"token function"}},[s._v("XCTAssert")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("parserError "),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("==")]),s._v(" nil"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token string"}},[s._v('@"error: %@"')]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" parserError"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n    ASTInitDeclareNode "),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("*")]),s._v("node1 "),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("ASTInitDeclareNode "),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("*")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("ast"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("nodes"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("firstObject"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n    "),n("span",{pre:!0,attrs:{class:"token function"}},[s._v("XCTAssert")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),s._v("node1 isKindOfClass"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),s._v("ASTInitDeclareNode class"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n    "),n("span",{pre:!0,attrs:{class:"token function"}},[s._v("XCTAssert")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),s._v("node1"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("declare"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("varname isEqual"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),n("span",{pre:!0,attrs:{class:"token string"}},[s._v('@"a"')]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n    "),n("span",{pre:!0,attrs:{class:"token function"}},[s._v("XCTAssert")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("node1"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("declare"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("type "),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("!=")]),s._v(" nil"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n    "),n("span",{pre:!0,attrs:{class:"token function"}},[s._v("XCTAssert")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("node1"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("declare"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("type"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("type "),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("==")]),s._v(" ASTSpecifierTypeInt"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n    "),n("span",{pre:!0,attrs:{class:"token function"}},[s._v("XCTAssert")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),s._v("node1"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("expression isKindOfClass"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),s._v("ASTValueNode class"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n    "),n("span",{pre:!0,attrs:{class:"token function"}},[s._v("XCTAssert")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("ASTValueNode "),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("*")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("node1"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("expression value"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("intValue "),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("==")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n    \n    ASTInitDeclareNode "),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("*")]),s._v("node2 "),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("ASTInitDeclareNode "),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("*")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("ast"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("nodes"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("lastObject"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n    "),n("span",{pre:!0,attrs:{class:"token function"}},[s._v("XCTAssert")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),s._v("node2 isKindOfClass"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),s._v("ASTInitDeclareNode class"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n    "),n("span",{pre:!0,attrs:{class:"token function"}},[s._v("XCTAssert")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),s._v("node2"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("declare"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("varname isEqual"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),n("span",{pre:!0,attrs:{class:"token string"}},[s._v('@"b"')]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n    "),n("span",{pre:!0,attrs:{class:"token function"}},[s._v("XCTAssert")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("node2"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("declare"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("type "),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("!=")]),s._v(" nil"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n    "),n("span",{pre:!0,attrs:{class:"token function"}},[s._v("XCTAssert")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("node2"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("declare"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("type"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("type "),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("==")]),s._v(" ASTSpecifierTypeDouble"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n    "),n("span",{pre:!0,attrs:{class:"token function"}},[s._v("XCTAssert")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),s._v("node2"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("expression isKindOfClass"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),s._v("ASTValueNode class"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n    "),n("span",{pre:!0,attrs:{class:"token function"}},[s._v("XCTAssert")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("ASTValueNode "),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("*")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("node2"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("expression value"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("doubleValue "),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("==")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token number"}},[s._v("1.0")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br"),n("span",{staticClass:"line-number"},[s._v("7")]),n("br"),n("span",{staticClass:"line-number"},[s._v("8")]),n("br"),n("span",{staticClass:"line-number"},[s._v("9")]),n("br"),n("span",{staticClass:"line-number"},[s._v("10")]),n("br"),n("span",{staticClass:"line-number"},[s._v("11")]),n("br"),n("span",{staticClass:"line-number"},[s._v("12")]),n("br"),n("span",{staticClass:"line-number"},[s._v("13")]),n("br"),n("span",{staticClass:"line-number"},[s._v("14")]),n("br"),n("span",{staticClass:"line-number"},[s._v("15")]),n("br"),n("span",{staticClass:"line-number"},[s._v("16")]),n("br"),n("span",{staticClass:"line-number"},[s._v("17")]),n("br"),n("span",{staticClass:"line-number"},[s._v("18")]),n("br"),n("span",{staticClass:"line-number"},[s._v("19")]),n("br"),n("span",{staticClass:"line-number"},[s._v("20")]),n("br"),n("span",{staticClass:"line-number"},[s._v("21")]),n("br"),n("span",{staticClass:"line-number"},[s._v("22")]),n("br")])]),n("p",[s._v("本小节相关代码位于 "),n("a",{attrs:{href:"https://github.com/SilverFruity/SimpleOCRunnerDemo/commit/4f27bd65488a2cf9b669b1047ab242b2f8a5999d",target:"_blank",rel:"noopener noreferrer"}},[s._v("Section: 生成语法树"),n("OutboundLink")],1),s._v(".")]),s._v(" "),n("h4",{attrs:{id:"执行语法树"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#执行语法树"}},[s._v("#")]),s._v(" 执行语法树")]),s._v(" "),n("div",{staticClass:"language-c line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-c"}},[n("code",[n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("int")]),s._v(" d "),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token number"}},[s._v("2")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n"),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("int")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token function"}},[s._v("add")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("int")]),s._v(" arg0"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("double")]),s._v(" arg1"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("  \n  "),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("return")]),s._v(" arg0 "),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("+")]),s._v(" arg1 "),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("+")]),s._v(" d"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n"),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("int")]),s._v(" a "),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n"),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("double")]),s._v(" b "),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token number"}},[s._v("2.0")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n"),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("int")]),s._v(" c "),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token function"}},[s._v("add")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("a"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" b"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br"),n("span",{staticClass:"line-number"},[s._v("7")]),n("br")])]),n("p",[s._v("在开始正文以前，我们先思考几个问题：")]),s._v(" "),n("ol",[n("li",[n("code",[s._v("int a = 1;")]),s._v("，关于 a 的值，应如何存储，并且在后续的计算中还能获取到 a 的值？")]),s._v(" "),n("li",[n("code",[s._v("int a = 1; double b = 1.0; int c = a + b;")]),s._v("，关于这里，在计算 c 时，a 和 b 的值，如何才能获取到，并且 a、b 的值是两个不同的类型，如何让他们以自己的类型进行计算，并且最终的值被强转为int？")]),s._v(" "),n("li",[n("code",[s._v("add(a , b);")]),s._v(" 函数调用时，参数如何传递？")]),s._v(" "),n("li",[s._v("在 "),n("code",[s._v("add")]),s._v(" 函数的调用中，"),n("strong",[s._v("d")]),s._v(" 的值如何获取？")]),s._v(" "),n("li",[s._v("如何兼容的 Objective-C 的 "),n("a",{attrs:{href:"https://developer.apple.com/library/archive/documentation/Cocoa/Conceptual/ObjCRuntimeGuide/Articles/ocrtTypeEncodings.html",target:"_blank",rel:"noopener noreferrer"}},[s._v("TypeEncode"),n("OutboundLink")],1),s._v("？")])]),s._v(" "),n("p",[s._v("现在有几个概念需要讲一下了。")]),s._v(" "),n("h5",{attrs:{id:"作用域-evalscope"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#作用域-evalscope"}},[s._v("#")]),s._v(" 作用域（EvalScope）")]),s._v(" "),n("p",[n("code",[s._v("{ }")]),s._v("就可视为一个作用域，EvalScope 主要由一个 NSMuatbleDictionary 和一个父作用域的引用组成。")]),s._v(" "),n("p",[s._v("它的作用主要是：")]),s._v(" "),n("p",[s._v("1.存储在当前作用域中声明的变量的值，比如: "),n("code",[s._v("int a = 1")]),s._v('，EvalScope["a"] = ORValue(1)。当 '),n("code",[s._v("int b = a")]),s._v(" 这种情况时，则会去 EvalScope 查找 'a' 变量的值，然后再注册一个 'b' 的变量。")]),s._v(" "),n("p",[s._v("2.父作用域的引用主要用于跨域操作时，跨域变量查找以及修改。我们的例子中，也出现了这种情况。")]),s._v(" "),n("h5",{attrs:{id:"中间值-orvalue"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#中间值-orvalue"}},[s._v("#")]),s._v(" 中间值（ORValue）")]),s._v(" "),n("p",[s._v("站在作用域的基础之上，在字典中保存的值，需要是一个对象。")]),s._v(" "),n("p",[s._v("尽管目前我们只需要处理 int 和 double 类型的值，但随着类型的增加，需要一个类来封装类型处理的相关逻辑以及值在内存中的存储的。")]),s._v(" "),n("p",[s._v("为了兼容 Objective-C 的 TypeEncode，在类中，添加一个 typeEncode 的属性，以做到：ORValue = 值 + TypeEncode 的组合。")]),s._v(" "),n("p",[s._v("同时，为了能够控制当前的执行状态，拥有一个 controlState 属性，用于在代码中实现 return 、continue、break。")]),s._v(" "),n("h5",{attrs:{id:"全局函数表-functiontable"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#全局函数表-functiontable"}},[s._v("#")]),s._v(" 全局函数表（FunctionTable）")]),s._v(" "),n("p",[s._v("为了全局函数能够正常调用，比如通过 "),n("code",[s._v("add(1, 0)")]),s._v(" 的形式，即可调用add函数的实现。因此我们实现了一个单例主要用于存储 "),n("strong",[s._v("[String : ASTFunctionImpNode]")]),s._v(" 的字典。")]),s._v(" "),n("p",[s._v("关于 "),n("strong",[s._v("ASTFunctionImpNode")]),s._v(" 的注册和执行的问题：")]),s._v(" "),n("p",[s._v("当遍历 execute 语法树时，此时为第一次调用 ASTFunctionImpNode.execute ，这个时候会向全局函数表进行注册，此时 EvalArgsStack 中的元素的个数必定为0。所有的函数和方法调用的时候，此时 EvalArgsStack 的元素的个数必定 >= 1，因此除了第一次注册执行以外，此后 ASTFunctionImpNode 所有的 execute，都进行解释执行操作。")]),s._v(" "),n("h5",{attrs:{id:"函数参数栈-evalargsstack"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#函数参数栈-evalargsstack"}},[s._v("#")]),s._v(" 函数参数栈（EvalArgsStack）")]),s._v(" "),n("p",[s._v("它其实很简单。在函数调用前，先将所有的参数按照顺序组成一个数组压入栈中，函数执行时，从栈顶取出数组，随后注册到函数作用域中，当函数执行完成后，再将参数数组出栈。")]),s._v(" "),n("p",[s._v("当函数执行时，是如何获取到他们的值的呢？")]),s._v(" "),n("div",{staticClass:"language-objc line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-objc"}},[n("code",[n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("//我们再回顾一下 函数声明的结构")]),s._v("\n"),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("@interface")]),s._v(" ASTFunctionDeclareNode"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),s._v(" ASTNode\n"),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("@property")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("nonatomic"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" strong"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" ASTDeclareNode "),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("*")]),s._v("declare"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n"),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("@property")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("nonatomic"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" strong"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" NSMutableArray "),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("<")]),s._v("ASTDeclareNode "),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("*")]),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">")]),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("*")]),s._v("argDeclares"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n"),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("@end")]),s._v("\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br")])]),n("p",[s._v("已知 "),n("code",[s._v("int add(int arg0, double arg1){ }")]),s._v(" 我们调用"),n("code",[s._v("add(1, 0);")]),s._v("。")]),s._v(" "),n("p",[s._v("首先，我们使用 'add' 在 FunctionTable 中查找到 "),n("code",[s._v("add")]),s._v(" 函数的实现（ASTFunctionImpNode）。")]),s._v(" "),n("p",[s._v("调用函数实现前，先执行"),n("code",[s._v("[EvalArgsStack.push:@[ORValue(1), ORValue(0)]]")]),s._v("。")]),s._v(" "),n("p",[s._v("最终 ASTFunctionImpNode.exexcute 时，向作用域中注册参数变量的逻辑如下：")]),s._v(" "),n("div",{staticClass:"language-objc line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-objc"}},[n("code",[s._v("NSArray "),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("*")]),s._v("args "),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),s._v("EvalArgsStack top"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\nNSArray "),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("*")]),s._v("declares "),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("self")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("declare"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("argDeclares"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\nfunctionSubScope"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),s._v("declares"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),n("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("varname"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" args"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),n("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token comment"}},[s._v('//functionSubScope["arg0"] = args[0];')]),s._v("\nfunctionSubScope"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),s._v("declares"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),n("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("varname"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" args"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),n("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token comment"}},[s._v('//functionSubScope["arg1"] = args[1];')]),s._v("\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br")])]),n("p",[s._v("关于最终代码运行的逻辑如下:")]),s._v(" "),n("div",{staticClass:"language-c line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-c"}},[n("code",[n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("int")]),s._v(" d "),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token number"}},[s._v("2")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("  "),n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// TopScope[“d”] = ORValue(2);")]),s._v("\n"),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("int")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token function"}},[s._v("add")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("int")]),s._v(" arg0"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("double")]),s._v(" arg1"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v(" \n    "),n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// ASTFunctionImpNode.exexcute(SubScope) -> ORValue:")]),s._v("\n    "),n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// list<ORValue> = ArgsStack.last")]),s._v("\n    "),n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// SubScope[“arg0”] = list[0] = ORValue(1)")]),s._v("\n    "),n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// SubScope[“arg1”] = lsit[1] = ORValue(2.0)")]),s._v("\n    "),n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// d = SubScope->superScope[“d”] = TopScope[“d”] = ORValue(2)")]),s._v("\n    "),n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// return ORValue(1) + ORValue(2.0) + ORValue(2)")]),s._v("\n    "),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("return")]),s._v(" arg0 "),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("+")]),s._v(" arg1 "),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("+")]),s._v(" d"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n"),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("int")]),s._v(" a "),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// TopScope[“a”] = ORValue(1);")]),s._v("\n"),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("double")]),s._v(" b "),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token number"}},[s._v("2.0")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// TopScope[“b”] = ORValue(2.0);")]),s._v("\n"),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("int")]),s._v(" c "),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token function"}},[s._v("add")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("a"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" b"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// ASTFunctionImpNode = GlobalFunctionTable[“add”]")]),s._v("\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// ArgsStack.push([a, b])")]),s._v("\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// SubScope->superScope = TopScope")]),s._v("\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// TopScope[“c”] = ASTFunctionImpNode.exexcute(SubScope)")]),s._v("\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// ArgsStack.pop()")]),s._v("\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br"),n("span",{staticClass:"line-number"},[s._v("7")]),n("br"),n("span",{staticClass:"line-number"},[s._v("8")]),n("br"),n("span",{staticClass:"line-number"},[s._v("9")]),n("br"),n("span",{staticClass:"line-number"},[s._v("10")]),n("br"),n("span",{staticClass:"line-number"},[s._v("11")]),n("br"),n("span",{staticClass:"line-number"},[s._v("12")]),n("br"),n("span",{staticClass:"line-number"},[s._v("13")]),n("br"),n("span",{staticClass:"line-number"},[s._v("14")]),n("br"),n("span",{staticClass:"line-number"},[s._v("15")]),n("br"),n("span",{staticClass:"line-number"},[s._v("16")]),n("br"),n("span",{staticClass:"line-number"},[s._v("17")]),n("br"),n("span",{staticClass:"line-number"},[s._v("18")]),n("br")])]),n("p",[n("img",{attrs:{src:a(524),alt:""}})]),s._v(" "),n("p",[s._v("本小节相关代码位于"),n("a",{attrs:{href:"https://github.com/SilverFruity/SimpleOCRunnerDemo/commit/33e2358c4e06baa1f35d4309b76f376a753f58fc",target:"_blank",rel:"noopener noreferrer"}},[s._v("Section: 执行语法树"),n("OutboundLink")],1),s._v(".")]),s._v(" "),n("p",[s._v("在这个简单的 demo 里面，许多功能都还未完成：操作符、基本类型转换、指针、方法替换、控制语句、结构体等等，但我希望能够让小伙伴们对语法树解释执行有一个基本的了解。针对未实现的功能，想深入的人，完全可以通过修改 demo，完成以上功能，疑惑的地方，可以查看 OCRunner 的源码。")])])}),[],!1,null,null,null);t.default=e.exports}}]);